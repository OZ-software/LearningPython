print('Задача 1. Космическая еда')
print ()

#Ваш космический корабль потерпел крушение на пустынной планете.
# Еда здесь не растёт, но вы спасли из обломков 100-килограммовый мешок гречки.
# Из прошлого опыта вы знаете,
# что если будете экономно питаться, то у вас будет уходить по 4 килограмма гречки в месяц.
# 
# Чтобы прикинуть гречневый бюджет,
# вы решили написать программу, которая выведет информацию
# о том сколько килограммов гречки у вас должно быть в запасе через месяц, два и так далее,
# пока она не закончится.
# Используйте цикл for.


buckwheat = 96   # Есть смысл сразу писать на 4 кг меньше, так как по факту мы знаем, что сейчас у нас 100 кг еды
month = 0

for num in range (buckwheat, -1, -4):
  month += 1
  if month == 1:      # В принципе эти проверки можно не делать, но так красивее для вывода
    print(f'Через {month} месяц у вас останется {num} кг. гречки')
  elif 1 < month < 5:
    print(f'Через {month} месяца у вас останется {num} кг. гречки')
  else:
    print(f'Через {month} месяцев у вас останется {num} кг. гречки')

print()
print(f'Человек без еды может прожить максимум месяц, поэтому на {month + 1} месяц вы умрете. Всего доброго.')
  
 # ---------------
 print('Задача 2. Долги')
print()
# МирПрогБанк наконец-то разделил законопослушных граждан и должников и поместил их в разные базы.
# Но банк не торопится как-то слишком сильно давить на возврат денег.
# Сейчас операторам банка дали задание
# позвонить каждому пятому должнику из списка (они нумеруются с нуля) и спросить,
# сколько примерно денег каждый из них задолжал банку.
# 
# Напишите программу,
# которая принимает на вход количество должников,
# затем спрашивает у каждого пятого (начиная с 0) его долг.
# В конце выводится общая сумма долгов.

# Пример:
# 
# Введите количество должников: 13
# Должник с номером 0
# Сколько должны? 1000
# Должник с номером 5
# Сколько должны? 5000
# Должник с номером 10
# Сколько должны? 2000
# Общая сумма долга: 8000

debtors = int(input('Введите количество должников: '))
debtors_sum = 0

for num in range (0, debtors + 1, 5):
  debtors_sum += int(input(f'Должник № {num}, сколько рублей должен? '))
print()

print(f'Общая сумма долгов равна {debtors_sum} р.')

print()
 
 # ---------------
 
 print('Задача 3. Таймер для микроволновых печей')

# Мы разрабатываем микропрограмму — таймер обратного отсчета для микроволновых печей.

# Есть задача убрать звук по готовности и заменить его сообщением на LED-экране.
# В нашем случае будем выводить в консоль сообщение с обратным отсчетом в секундах от “reverse_timer” до момента готовности, то есть «0» секунд, и спрашивать пользователя, готов ли он забрать еду.

# Пользователь в любой момент может прервать режим разогрева, введя «1» (то есть ответить «Да, еда готова»), тогда программа выводит на экран сообщение «Ваша еда готова, можете забрать» и показывает, на какой секунде был прерван таймер.
# Если пользователь отвечает «0», что равноценно «Нет», то таймер уменьшается. Когда он достигнет «0» секунд, выводим сообщение «Ваша еда готова, осторожно горячo!»

# В данном задании используем цикл for.
# “reverse_timer” – переменная счетчик, которую запрашиваем у пользователя через функцию ввода input.

print()
reverse_timer = int(input('Введите время разогрева в секундах: '))
microstop = False

for num in range (reverse_timer, 0, -1):
  print (num, 'сек.')
  microstop = int(input('Еда готова? - 1. Продолжить разогрев? - 0: '))
  if microstop:
    break
    
print() 
print('Ваша еда готова, осторожно горячо!')

print()
 
 # ---------------
 
 print('Задача 4. Отрезок')

#Напишите программу, 
# которая считывает с клавиатуры три числа a, b и c,
# считает и выводит на консоль среднее арифметическое
# всех чисел из отрезка [a; b], которые кратны числу c.
# Подсказка: (a и b  являются промежутком, а c для проверки кратности).

print()
num_a = int(input('Введите число a: '))
num_b = int(input('Введите число b: '))
num_c = int(input('Введите число c: '))
summ = 0
iterator = 0
first_step = 0
flag = False

for num in range (num_a, num_b+1):      # Для начала мы найдем первое число, которое кратно числу "с" и запомним его
  if num % num_c == 0:
    first_step = num
    print (f'Первое число, кратное {num_c} равно = {first_step}', )
    flag = True
    break
if flag:
  for num in range (first_step, num_b + 1, num_c):      # Будем проходить только по числам кратным "c" - это значительно ускорит работу программы
    summ += num
    iterator += 1
    print (num, summ, iterator)
  print()
  summ /= iterator                     # высчитываем среднее арифметическое
  print('Среднее арифметическое будет равно', {summ})
else:
  print()
  print(f'Чисел кратных {num_c} нет в заданном промежутке')

print()
 
 # ---------------
 
 print('Задача 5. Функция 2')

#В прошлый раз мы написали Саше программу,
# которая считает функцию  в каждой точке отрезка и с нужным шагом, начиная с конца - от большего значения X к меньшему, выводит ответ на экран.
# Но теперь ему нужно,
# чтобы значения считались в обратном порядке.
# Плюс к этому в программе ему нужно сделать так,
# чтобы можно было настраивать шаг, с которым он скачет по точкам отрезка.
# 
# Напишите программу,
# которая получает на вход начало и конец отрезка, а также шаг.
# Затем высчитывает функцию игрек в каждой точке отрезка
# и с нужным шагом, начиная с конца, и выводит ответ на экран.

# Сама функция выглядит так:
# y = x**3 + 2*x**2 - 4x + 1

# Пример:
# 
# Введите начало отрезка: -2
# Введите конец отрезка: 2
# Введите шаг: -1
# В точке 2 функция равна 9
# В точке 1 функция равна 0
# В точке 0 функция равна 1
# В точке -1 функция равна 6
# В точке -2 функция равна 9

print()

start_num = int(input('Введите значение для начала отрезка: '))
end_num = int(input('Введите значение для конца отрезка: '))
if start_num >= end_num:
  print('Начало отрезка не может быть меньше или равно его концу. Конец работы программы')

else:
  step_num = int(input('Введите шаг прохода по отрезку: '))
  print()
  
  if step_num > end_num - start_num or step_num == 0:
    print('Шаг отрезка не может быть больше длинны отрезка или быть равен 0')
  
  else:
    step_num *= -1
    for num_x in range (end_num, start_num, step_num):
      num_y = num_x ** 3 + 2 * num_x ** 2 - (4 * num_x + 1)
      print(f'В точке {num_x} функция равна {num_y}')
      print()

print()
 
 # ---------------
 
 print('Задача 6. Письмо')

# У нас есть
# квадратный конверт размера 12х12 сантиметров и письмо на квадратном листе бумаги,
# которое не помещается в конверт.
# 
# Напишите программу,
# которая подскажет сколько раз нужно сложить письмо пополам,
# чтобы оно поместилось в конверт.
# Размеры письма вводятся с клавиатуры.

size_of_list = int(input('Введите размер квадратного листа бумаги: '))
fold = 0
if size_of_list <= 12:
  print ('Ваш лист уже входит в конверт')
for num in range (size_of_list, 12, -1):
  size_of_list = size_of_list / 2
  fold += 2
  if size_of_list <= 12:
    print(f'Лист бумаги нужно сложить в {fold} раз(-а). Он будет равен {size_of_list} см.')
    break
 
 # ---------------
 
print('Задача 7. Стипендия')

#Ежемесячная стипендия студента составляет educational_grant руб.,
# а расходы на проживание превышают стипендию и составляют expenses руб. в месяц.
# Рост цен ежемесячно увеличивает расходы на 3%, кроме первого месяца.
# 
# Составьте программу расчета суммы денег,
# которую необходимо получить у родителей один раз в начале обучения,
# чтобы можно было прожить учебный год (10 месяцев), используя только эти деньги и стипендию.

print()
educational_grant = int(input('Размер стипендии: '))
current_month_expenses = int(input('Введите размер ежемесячных расходов: '))
expenses = 0

educational_grant *= 10

for num in range (1,11):
    expenses += current_month_expenses
    # print (round(expenses,2))
    current_month_expenses *= 1.03


parent_grant = round(expenses, 2) - educational_grant

print (f'У мамы с папой придется попросить {parent_grant} р.')

print()
 
 # ---------------

print('Задача 8. Сумма ряда')

# Дано натуральное число n.
# Напишите программу для вычисления следующей суммы ряда (начиная с единицы)

# S = 1 - 1/2 + 1/4 - 1/8 + … (-1)**N * 1/2**N 

print()
num_n = int(input('Введите число N: '))
print()
sum_row = 0    # Сумма всех членов ряда


for num in range (0, num_n + 1):
  current_rel = (-1) ** num * ( 1 / 2 ** num )  # Вычисляем текущий член
  
  sum_row += current_rel      # Сумма
  print (f'Член ряда числа {num}, равен {current_rel}')
  print()
print ("Сумма ряда равна ", sum_row)
print()

 # ---------------
 
 print('Задача 9. Выражение')


#Дано число x.
#Напишите программу для вычисления следующего выражения 

# ((x-1)(x-3)(x-7)…(x-63)/
# ((x-2)(x-4)(x-8)…(x-64)) 

num_x = int(input('Введите число Х: '))
numerator = 1
denominator = 1

for num in range (1, 7):
  2 ** num
  numerator *= num_x - 2 ** num + 1
  denominator *= num_x - 2 ** num
  # print (num_x - 2 ** num + 1, num_x - 2 ** num, numerator, denominator)    # Для проверки
  
print('Вычисление равно ', numerator / denominator)
print()
 # ---------------
 
 print('Задача 10. Кинотеатр')

# X мальчиков и Y девочек пошли в кинотеатр
# и купили билеты на подряд идущие места в одном ряду.
# 
# Напишите программу,
# которая выдаст, как нужно сесть мальчикам и девочкам,
# чтобы рядом с каждым мальчиком сидела хотя бы одна девочка,
# а рядом с каждой девочкой — хотя бы один мальчик.
# 
# На вход подаются два числа - кол-во мальчиков X и кол-во девочек Y.
# В ответе выведите какую-нибудь строку,
# в которой будет ровно X символов “B” (обозначающих мальчиков)
# и Y символов “G” (обозначающих девочек), удовлетворяющую условию задачи.
# Пробелы между символами выводить не нужно.
# Если рассадить мальчиков и девочек согласно условию задачи невозможно,
# выведите строку “Нет решения”.
# 
# 
# Пример 1:
# 
# Введите кол-во мальчиков: 5
# Введите кол-во девочек: 5
# Ответ: BGBGBGBGBG
# 
# Пример 2:
# 
# Введите кол-во мальчиков: 5
# Введите кол-во девочек: 3
# Ответ: BGBGBBGB
# 
# Пример 3:
# 
# Введите кол-во мальчиков: 100
# Введите кол-во девочек: 1
# Ответ: Нет решения


people_a = int(input('Введите количество мальчиков: '))
people_b = int(input('Введите количество девочек: '))
counter = 3    # Это нужно для того, чтобы когда было окружение одних элементов другими идти по схеме МДММДМ или ДМДДМД
string_t = ''

max_ran = people_a + people_b                # Мы находим максимальное значение по которому мы будем двигаться

abs_people = abs(people_a - people_b)

for num in range (1, max_ran, 2):
  if people_a == people_b:
    string_t += 'МД'
    people_a -= 1
    people_b -= 1
    # print(string_t)
  if people_a > people_b:
    string_t += 'МДМ'
    people_a -= 2
    people_b -= 1
    # print(string_t)
  if people_b > people_a:
    string_t += 'ДМД'
    people_a -= 1
    people_b -= 2
    # print(string_t)
  if people_a ==0 and people_b == 0:
    break
  if people_a ==0 or people_b == 0:
    print('Задача не имеет решения')
    break

print('Порядок рассадки следующий', string_t)
  

 # ---------------
 
