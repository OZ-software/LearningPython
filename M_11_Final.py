print('Задача 1. Конвертация')


# При покупках за рубежом 
# с помощью карты банки делают конвертацию через промежуточную валюту.

# Например, 
# если купить что-то в евро, 
# то сначала эта сумма конвертируется в доллары, а уже потом - в рубли.
# 
# Напишите программу, 
# которая получает на вход стоимость покупки в евро,
# затем выводит ответ в рублях.
# 
# Мы живём в альтернативной реальности,
# где 1 евро = 1.25 доллара, а 1 доллар = 60.87 рублей.

print ()

price_euro = float(input('Введите стоимость покупки в евро: '))
print ()
price_rub = round(price_euro * 1.25 * 60.87,2)

print('Стоимость покупки в рублях равна', price_rub)

print ()
#--------------------------------------------
print('Задача 2. Грубая математика')

# В одном аналитическом центре,
# где занимаются разного рода математическим анализом,
# работал практикант,
# который написал программу для расчёта некоторых функций.
# Правда, он в тот день очень устал
# и немного не так прочитал техническое задание 
# и функции теперь рассчитываются довольно грубо.
# 
# Вводится последовательность из N вещественных чисел.
# При этом положительные числа округляются вверх, отрицательные округляются вниз.
# 
# Напишите программу,
# которая выводит натуральный логарифм от числа,
# если оно положительное, и экспоненту в степени числа, если оно отрицательное.
# 
# Пример:
# 
# Введите кол-во чисел: 3
# Введите число: 1.3
# x = 2   log(x) = 0.6931471805599453
# 
# Введите число: -2.1
# x = -3   exp(x) = 0.049787068367863944
# 
# Введите число: -5.9
# x = -6   exp(x) = 0.0024787521766663585

print()

import math

count_num = int(input('Введите количество чисел: '))

for count in range (1, count_num + 1):
  print()
  number = float(input(f'Введите число {count}: '))
  if number > 0:
    number = math.ceil(number)
    print('x =', number, end = '\t') 
    print('log(x) =', math.log(number))
  else:
    number = math.floor(number)
    print('x =', number, end = '\t') 
    print('exp(x) =', math.exp(number))    

print()
#--------------------------------------------
print('Задача 3. Аналог Steam')

# Вы пишете программу-инсталлятор для компьютерной игры.
# Пока инсталлятор скачивает обновление,
# пользователю нужно показать сколько процентов уже скачалось,
# чтобы он мог решить пойти заварить чаю, или подождать у экрана компьютера.
# 
# Обновления игры всегда занимают разное количество мегабайт,
# да и скорость интернет-соединения у игроков разная.
# 
# Напишите программу,
# принимающую на вход размер файла обновления в мегабайтах
# и скорость интернет соединения в мегабайтах в секунду.
# 
# Для каждой секунды программа рассчитывает
# и выводит на экран сколько процентов от всего объема уже скачано,
# до тех пор пока не будет скачан весь объем.
# В конце программа должна показать сколько всего секунд заняло скачивание обновления.
# Обеспечьте контроль ввода.
# 
# Пример:
# 
# Укажите размер файла для скачивания: 123
# Какова скорость вашего соединения? 27
# 
# Прошло 1 сек. Скачано 27 из 123 Мб (22%)
# Прошло 2 сек. Скачано 54 из 123 Мб (44%)
# Прошло 3 сек. Скачано 81 из 123 Мб (66%)
# Прошло 4 сек. Скачано 108 из 123 Мб (88%)
# Прошло 5 сек. Скачано 123 из 123 Мб (100%)
import math

print ()

size_pack = int(input('Введите размер файла в мегабайтах: '))
speed_pack = int(input('Введите скорость мегабайт за секунду: '))

current_state = 0
current_percent = 0

count_sec = math.ceil (size_pack/speed_pack)

print()

for sec in range(1, count_sec + 1):
  current_state += speed_pack
  current_percent = int (current_state / size_pack * 100)
  if current_percent <= 100:  # для всех шагов кроме последнего и, как исключение, если 100% получилось точно при рассчетах
    print(f'Прошло {sec} сек. Скачано {current_state} из {size_pack} Мб ({current_percent}%)')
  
  else:    # Так как мы не можем скачать больше чем есть, последний шаг выводим в ручном режиме
    print(f'Прошло {sec} сек. Скачано {size_pack} из {size_pack} Мб (100%)') 

print()
#--------------------------------------------
print('Задача 4. Первая цифра')


# Дано положительное действительное число X. 
# Выведите его первую цифру после десятичной точки. 
# При решении этой задачи нельзя пользоваться условной инструкцией, циклом или строками
import math

print()

number = float(input('Введите положительное вещественное число: '))
               
remains = float(number - math.floor(number))

remains = int(remains * 10)

print(f'Первая цифра после точки в вашем числе равна {remains}')

print
#--------------------------------------------
print('Задача 5. Вот это объёмы!')

# Для курсовой работы по физике
# Андрею нужно сравнить объёмы двух планет: Земли и какой-нибудь случайной,
# которая может в теории существовать в нашей вселенной.
# Андрей хорошо разбирается в формулах,
# а вот считать что-то, а уж тем более самому - это явно не его.
# Объём Земли ему известен заранее  - это 10.8321 * 10 ** 11 км3
# 
# А вот объём случайной планеты ему нужно будет посчитать.
# Благо, у него есть формула
# 
# V = 4/3 πR ** 3
# 
# где V - это объём, π - число пи, а R - радиус планеты.
# 
# Напишите программу, 
# которая получает на вход радиус случайной планеты
# и выводит на экран во сколько раз планета Земля меньше или больше по объёму.
# Ответ округлите до трёх знаков после запятой
 
# Пример:
# Введите радиус случайной планеты: 3389.5
# Объём планеты Земля больше в 6.641 раз

# Пример 2:
# Введите радиус случайной планеты: 7000
# Объём планеты Земля меньше в (1/0.754) = 1.326 раз

print()

import math

r_planet = float(input('Введите радиус случайной планеты в км: '))
if r_planet > 0:
  # Вычисление объма планеты и земли
  v_planet = round (4 / 3 * math.pi * r_planet ** 3, 3)
  v_earth = round (10.8321 * 10 ** 11, 3)
            # Случай, когда планета больше Земли  
  if v_planet > v_earth: 
   print(f'Объем планеты Земля меньше в {round(v_planet / v_earth, 3)} раз')
            # Случай, когда планета меньше Земли
  elif v_planet < v_earth and round(v_earth / v_planet, 3) != 1.0:
   print(f'Объем планеты Земля больше в {round(v_earth / v_planet, 3)} раз')
            # Случай, когда они равны
  elif round(v_earth / v_planet, 3) == 1.0:
    print('Объем планеты Земля объему вашей планеты')
else:      # Случай, когда радиус планеты меньше или равен 0
  print('Ваша планета вероятно попала в черную дыру, так как радиус меньше или равен нулю')

print()
#--------------------------------------------
print('Задача 6. Ход конём')


# В рамках разработки шахматного ИИ стоит новая задача.
# По заданным вещественным координатам коня
# и второй точки программа должна определить может ли конь ходить в эту точку.
# 
# Используйте как можно меньше конструкций if и логических операторов.
# Обеспечьте контроль ввода.

# Введите местоположение коня:
# 0.071
# 0.118
# Введите местоположение точки на доске:
# 0.213
# 0.068
# Конь в клетке (0, 1). Точка в клетке (2, 0).
# Да, конь может ходить в эту точку.
position = [0.0, 0.0, 0.0, 0.0]    # Введно для того, чтобы сэкономить на коде при логических проверках
inc = 0
step_x = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  # Тут будут все возможные положения коня по горизонтали
step_y = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  # А здесь все возможные положения коня по вертикали

print()
position[0] = float(input('Введите местоположение коня по горизонатали: '))
position[1] = float(input('Введите местоположение коня по вертикали: '))
position[2] = float(input('Введите местоположение точки на доске по горизонатали: '))
position[3] = float(input('Введите местоположение точки на доске по вертикали: '))

position_flag = False      # Флаг нужен для понимания может ли конь выйти в заданную точку

for i in range (4):
  if position[i] >= 0.8 or position[i] < 0:
    print()
    print(f'Координата равная {position[i]} выходит за рамки доски')
    break
  else:
    # Если число в рамках доски преобразуем его в целую коородинату + 1 т.к на шахматной доске значения идут в от 1 до 8
    position [i] = int(position[i] * 10) + 1;
    
    inc += 1    # Это нужно для того, чтобы не пустить дальше ход событий, если хоть одно значение выходит за рамки доски

if inc == 4:
  # print (position)
  
  # Сейчас будем высчитывать все возможные положения коня исходя из текущего положения и того, что он ходит буквой "Г".
  # Так как никакой особой задачи не стоит относительно способа формирования местоположения коня, я не стал делать мудреный цикл. Тем более, что так или иначе экономии на ресурсе комьютера я не вижу, все равно нужно будет делать мат. операции, а время на придумку этой схемы займет больше, чем просто написать все решения.
  
  # Перебор всех возможных положений коня
  
  # Движение вверх
  step_x[0] = position [0] + 1
  step_y[0] = position [1] + 2
  
  step_x[1] = position [0] - 1
  step_y[1] = position [1] + 2
  
  # Движение вниз
  
  step_x[2] = position [0] + 1
  step_y[2] = position [1] - 2
  
  step_x[3] = position [0] - 1
  step_y[3] = position [1] - 2
  
  # Движение вправо
  step_x[6] = position [0] + 2
  step_y[6] = position [1] + 1
  
  step_x[7] = position [0] + 2
  step_y[7] = position [1] - 1
  
  # Движение влево
  step_x[4] = position [0] - 2
  step_y[4] = position [1] + 1
  
  step_x[5] = position [0] - 2
  step_y[5] = position [1] - 1
  
  # print(step_x)
  # print(step_y)
  
  # Теперь у нас есть положение всех возможных ходов коня из текущей позиции и все что нам нужно это проверить подходят ли наши координаты под выбранные условия. Находится на доске после 
  
  for i in range (8):
    if step_x[i] == position[2] and step_y[i] == position[3]:
      print()
      print (f'Конь в клетке {position [0], position [1]}. Точка в клетке {position [2], position [3]}')
      print ('Да, конь может ходить в эту точку')
      position_flag = True
      break    # дальше идти смысла нет
  
  if not position_flag:      # Если мы не нашли соответствия
    print ()
    print(f'Нет, конь не может пойти в клетку {position [2], position [3]}')
    print ()
    print(f'Из текущей клетки {position [0], position [1]} конь может пойти на следующие позиции:')
    # То, что ниже не относится к решению задачи, но я решил расширить её, 
    for i in range (8):
      if 9 > step_x[i] > 0 and 9 > step_y[i] > 0:
        print (f'{step_x[i], step_y[i]}')
  print ()
#--------------------------------------------
print('Задача 7. За что?')
print()
# Вы встретились со своим старым другом,
# который тоже изучает программирование, правда, в другом учебном заведении.
# За чашкой кофе он пожаловался вам,
# что сумасбродный препод дал им задание написать программу,
# которая из двух введённых чисел определяет наибольшее,
# не используя при этом условные операторы, циклы и встроенные функции вроде max/min/sorted.
# 
# Радуясь, что на вашем курсе такого не требуют,
# вы всё-таки решаете помочь своему другу.
# 
# Напишите для него эту программу.
# 
# Пример:
# 
# Введите первое число: 10
# Введите второе число: 5
# 
# Наибольшее число: 10

num_a = float(input('Введите число a: '))
num_b = float(input('Введите число b: '))

razn = 0      # Разность чисел
summ = 0       # Сумма чисел

summ =  num_a + num_b
razn = abs (num_a - num_b)

half = (summ - razn) / 2

max = half + razn

print('Большее из двух введенных чисел равно ', max)
#--------------------------------------------
