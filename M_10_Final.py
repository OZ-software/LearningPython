print('Задача 1. Тестовое задание')

# Степан пришёл устраиваться на работу, где ему дали тестовое задание:
# проанализировать такую таблицу,
# понять как она строится и написать программу для вывода её на экран.

# 0 2 4 6  8  10
# 1 3 5 7  9  11
# 2 4 6 8  10 12
# 3 5 7 9  11 13
# 4 6 8 10 12 14
# 5 7 9 11 13 15
# 
# Помогите Степану реализовать такую программу.
print ()

num = 0

for row in range (6):
  for col in range (6):
    print(row + col * 2, end = '\t')
  print()
    
print()

#-------------------------------

print('Задача 2. Лестница')

# Пользователь вводит число N.
# Напишите программу, которая выводит такую “лесенку” из чисел:

# Введите число: 5
# 1
# 2 2
# 3 3 3
# 4 4 4 4
# 5 5 5 5 5
print()
num_n = int(input('Введите число N: '))
print()


for row in range (num_n):
  for col in range (num_n):
    if row >= col:
      print(row + 1, end = ' ')
  print()

print()


#-------------------------------

print('Задача 3. Рамка')

# Напишите программу,
# которая рисует с помощью символьной графики прямоугольную рамку.
# Для вертикальных линий используйте символ вертикального штриха “|”,
# а для горизонтальных - дефис “-”. Пусть пользователь вводит ширину и высоту рамки.

#  _ _ _ _ _ _ _ _ _
# |                 |
# |                 |
# |                 |
# |                 |
# |                 |
# |                 |
# |_ _ _ _ _ _ _ _ _|


# исходя из задания курса должно быть так, я решил делать через -, а не _
# 
#  
# |-----------------|
# |                 |
# |                 |
# |                 |
# |                 |
# |                 |
# |                 |
# |-----------------|



print()
horiz = int(input('Введите ширину рамки: '))
vert = int(input('Введите высоту рамки: '))

for row in range(vert):
  for col in range(horiz):
    if col == 0 or col == horiz - 1:
      print('|', end = '')
    
    elif row == 0 or row == vert -1:
      if col != 0 or col != horiz - 1:
        print('-', end = '') 
    
    else:
      print(' ', end = '')
  print()

print()

#-------------------------------

print('Задача 4. Крест')

# Напишите программу,
# которая выводит на экран крест из символов “^”.
#
# (Символы выводятся по диагоналям воображаемого квадрата.)

# ^        ^
#  ^      ^ 
#   ^    ^  
#    ^  ^   
#     ^^    
#     ^^    
#    ^  ^   
#   ^    ^  
#  ^      ^ 
# ^        ^

# !!! Я специально сделал квадрат визуально, а не прямоугольник

print ()
square = int(input('Введите длину стороны квадрата: '))

print ()

for row in range (square):
  for col in range (square):
    
    if col == row:
      print('^', end = ' ')
    
    elif col == square - row - 1:  # Так как размер стороны квадрата в реальной жизни считается от 1, а в программе от 0, вычитаем 1
      print('^', end = ' ')
    
    else:
      print(' ', end = ' ') 
  print()

print()
      
#-------------------------------
print('Задача 5. Простые числа')


#Напишите программу,
#которая считает количество простых чисел в заданной последовательности и выводит ответ на экран.

print()
sequence_max = int(input('Введите кол-во чисел: '))
print()
num_count = 0         # Переменная нужна для определения является ли число простым
num_iter = 0          # Переменная нужна для подсчета простых числе в последовательности

for num in range (sequence_max):
  pot_s_num = int(input(f'Введите число {num + 1} последовательности: '))
  
  for num_check in range (1, pot_s_num + 1):
    if pot_s_num == 1:   # Так как единственное число, которое делится на себя и на 1 за один цикл проверки это 1, ставим 2 в счетчик
      num_iter = 2
      break            # Дальше нет смысла идти по циклу
    
    if pot_s_num % num_check == 0:    # Каждый раз, когда число делится на какое-то число без остатка, то делаем инкремент
      num_iter += 1            
      
  
  if num_iter == 2:    # Если число простое, то здесь может быть только 2 (на 1 и на себя делится)
    num_count += 1      # Значит нужно посчитать это число

  print()          # Подготовка к следущей итерации цикла по проверке нового числа
  num_iter = 0    

print(f'Количество простых чисел в последовательности: {num_count}')

print()

#-------------------------------

print('Задача 6. Сумма факториалов')

# Напишите программу,
# которая запрашивает у пользователя число N
# и находит сумму факториалов 1! + 2! + 3! +... + N! 
print()

num_n = int(input('Введите число N для рассчета суммы факториалов: '))
sum_f = 0     # для расчета суммы факториалов
cur_f = 1     # для расчета текущего факториала
print()

if num_n <= 0:
  print('Число должно быть больше нуля: ')
else:
  for ff_num in range (1, num_n + 1):    # в этом цикле будем суммировать полученный факториал
    for sf_num in range (1, ff_num + 1):  # в этом цикле будем получать текущий факториал
      cur_f *= sf_num;
    # print('!',cur_f)          # для активации проверки
    sum_f += cur_f  
    cur_f = 1                  # получаем начальное значения для рассчета факториала.
  print (f'Сумма факториалов для числа {num_n} равна', sum_f)

print ()

#-------------------------------

print('Задача 7. Наибольшая сумма цифр')
print()
# Вводится N чисел.
# Среди натуральных чисел, которые были введены,
# найдите наибольшее по сумме цифр. Выведите на экран это число и сумму его цифр.

count_num = int(input('Введите количество вводимых чисел: '))

current_num = 0  # Текущее введенное число для проведения операций
buffer_num = 0  # место, чтобы запомнить текущее число
current_sum = 0  # Число для рассчета суммы текущего числа

max_num = 0  # Число для запоминания максимума
max_sum = 0  # Число для хранения суммы максимального числа

for num in range(count_num):
    current_num = int(input(f'Введите число {num + 1} - '))
    buffer_num = current_num
    # print(buffer_num)
    while True:
        current_sum += buffer_num % 10  # Прибавляем  первое число с конца в сумму
        buffer_num //= 10  # Запоминаем число без последнего
        #print (current_sum, buffer_num)  # Для проверки

        if buffer_num == 0:  # Если мы дошли до конца списка, тогда начинается работа над сравнением, сохранием суммы и числа в памяти
            break

    if current_sum > max_sum:  # Если сумма текущего числа больше последного заполненного
        max_sum = current_sum  # Тогда запоминаем сумму
        max_num = current_num  # И это число

    current_sum = 0

print()
print(f'Число {max_num} имеет максимальную сумму цифр, равную {max_sum}')

print()


#-------------------------------
print('Задача 9. Пирамидка 2')


# Напишите программу,
# которая получает на вход количество уровней пирамиды и выводит их на экран,

# Пример:
# 
#             1
#          3     5
#       7     9     11
#    13    15    17    19
# 21    23    25    27    29

print()

height = int(input('Введите высоту пирамиды: '))
current_max = 1      # Необходимо для того, чтобы определять максимальное количество выводимых элементов пирамиды    
length = 1

step = 6      # Это шаг и его нужно уменьшить на единицыу, когда число становится двухзначным, трех для красооты
number_count = 1 # Начинаем  с вывода этого числа

inc_element = 0      # Нужно для того, чтобы высчитывать шаг вывода эл-ов пирамиды

print()

# Сначала определим длинну строки исходя из высоты по формуле выс + ((выс-1) х 5)

if height > 1:
  length = height + ((height - 1) * 5)


# Теперь найдем середину строки от которой будем плясать c

half_length = (length // 2) + 1

if height <= 35:
  for row in range (1, height + 1):
    
    current_max = 1    # Первая строка начинается с 1-го элемента
    inc_element = half_length - 3 * (row - 1)    # В каждой строке первый элемент вычисляется по этой формуле
    
    for col in range (1,length + 1):  
      
      if col == inc_element and current_max <= row:    # начинаем с первого элемента выводить текущее значение
        print (number_count, end = '')
        number_count += 2
        
        if number_count == 13 or number_count == 103 or number_count == 1001:   # При смене разрядности уменьшать шаг пробелов, чтобы пирамида выглядела красиво
          step -= 1
        
        inc_element += step      # переходим на следующий шаг
        current_max += 1      # В каждой строке не может быть элементов больше чем текущий номер строки
      else:              # Во всех остальных случаях выводим пробел
        print (' ', end = '')
    
    print()    
else:      # программу можно сделать и для большей высоты, но экран не позволяет больше вывести.
  
  print('Программа сделана для максимальной высоты пирамиды равной 35. Обратитесь к разарботчику для расширения возможностей')
  



print()

#-------------------------------
print('Задача 10. Яма ')


# В одной компьютерной текстовой игре рисуются всяческие элементы ландшафта.
#
# Напишите программу,
# которая получает на вход число N и выводит на экран числа в виде “ямы”:

# Введите число: 5
# 
# 5........5
# 54......45
# 543....345
# 5432..2345
# 5432112345

print ()

height = int(input('Введите число: '))
length = 2 * height

print()

for col in range (height):
  for row in range (length):
    
    if row <= col:        # Вывод чисел перед ямой
      print (height - row, end = '')
    
    elif row >= length - col - 1:    # Вывод чисел после ямы, решил делать через модуль
      print (abs(height - row - 1), end = '')
    
    else:                # В остальных случаях формируем яму из точек
      print('.', end = '')
  print()


print()