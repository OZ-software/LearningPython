#----------------------

print('Задача 1. Календарь')

# Мы продолжаем разрабатывать удобный календарь для смартфона.
# Функцию определения високосного года мы добавили,
# но забыли ещё много разных очевидных вещей.
# 
# Напишите программу,
# которая принимает от пользователя день недели в виде строки и выводит его номер на экран.
# 
# Пример:
# Введите день недели: вторник
# Номер дня недели: 2

print ()
week_day = ['понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота', 'воскресенье']

day_name = input('Введите день недели: ')
for day in week_day:
  # print (day)
  if day_name == day:
    print('Номер дня недели: ', week_day.index(day_name)+1)
    break
print()

#----------------------

print('Задача 2. Я стал новым пиратом!')

#Старому капитану необходимо пополнить команду.
# Но попадут на его корабль только достойные! 
# Он отобрал 10 человек и те, кто из них крикнет слово “Карамба”, попадут на борт.
# 
# Пользователь вводит 10 слов. 
# 
# Напишите программу,
# которая определяет, сколько из них совпадают со словом “Карамба”.
print ()
summ = 0

for i in range (10):
  k_slogan = input(f'Матрос {i+1}, назови своё слово! ')
  if k_slogan == 'Карамба' or k_slogan == 'карамба':
    summ += 1

print()
print(f'Всего нам подходит {summ} матрос(-ов)')
print()

#----------------------

print('Задача 3. Кривой мессенджер')

# При передаче сообщений в одном мессенджере иногда возникают неполадки
# и в сообщение попадает лишний символ - звёздочка.
# Пользователям это изрядно надоело, и они начали просто уходить в другие мессенджеры.
# Хотя одному пользователю стало интересно, на каких обычно позициях появляется эта звёздочка.
# 
# Пользователь вводит строку,
# в которой встречается символ “*” ровно один раз. 
# 
# Напишите программу,
# которая определяет порядковый номер этого символа в строке.
# 
# Пример:
# Введите текст: Пр*ивет как дела
# Символ ‘*’ стоит на позиции 3

print()

sum_x = 0      # для подсчета звездочек
symb_x = 0      # для получения порядкового номера звездочки
string_x = input('Введите строку \n')

print()
flag_x = '*' in string_x  # Присваиваем результат проверки вхождения символа *

if flag_x: 
  for char in enumerate(string_x):
    if char [1] == '*':
      sum_x += 1      # считаем количество символов *
      symb_x = char[0]   # получаем порядковый номер символа * в строке
      if sum_x > 1:
        print ('В вашей строке больше одного символа "*"')
        break
  if sum_x == 1:    # Не зная, что у нас сейчас после выхода из цикла, поэтому нужно проверить один или нет символ * в строке
    print (f'Символ "*" стоит на позиции {symb_x + 1}  ')

else: 
  print ('В вашей строке нет символа "*"')

#----------------------

print('Задача 4. Театр')

# Планируется построить театр под открытым небом,
# но для начала нужно хотя бы примерно понять сколько должно быть рядов,
# сидений в них и какое лучше сделать расстояние между рядами.
#
# Напишите программу,
# которая получает на вход кол-во рядов, сидений и свободных метров между рядами,
# а затем выводит примерный макет театра на экран.

# Сцена
# Введите кол-во рядов: 5
# Введите кол-во сидений ряду: 7
# Введите кол-во метров между рядами: 3
#
# ======= *** =======
# ======= *** =======
# ======= *** =======
# ======= *** =======
# ======= *** =======
print()
line = int(input('Введите количество рядов: '))
seat = int(input('Введите количество сидений в ряду: '))
passage = int(input('Введите количество метров между рядами: '))
print()

seat = line * '=' + ' ' + passage * '*' + ' ' + line * '='    # Забиваем количество мест в ряд, количество метров для прохода

for num in range (line):
  print (seat)

#----------------------
print('Задача 5. Марсоход 2')

# К роботу Валли отправили ещё одного робота Билли.
# Это его первый поход на Марс,
# поэтому он тестируется в прямоугольном помещении размером 15 на 20 метров.
# Марсоход высаживается в центре комнаты (в точке 8, 10),
# после чего управление им передаётся оператору - пользователю вашей программы.
# 
# Программа спрашивает
# в какую сторону оператор хочет направить робота:
# север (клавиша W),
# юг (клавиша S),
# запад (клавиша A)
# или восток (клавиша D).
# 
# Оператор делает выбор,
# марсоход перемещается на 1 метр в эту сторону и программа сообщает новую позицию марсохода.
# Если марсоход упёрся в стену,
# то он не должен пытаться перемещаться в сторону стены, в этом случае его позиция не меняется.
# 
# Пример:
# 
# [Программа]: Марсоход находится на позиции 6, 19, введите команду:
# [Оператор]: A
# [Программа]: Марсоход находится на позиции 5, 19, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:
print()

key_press = ''      # Здесь будем считывать нажатую клавишу.
position_x = 8      # Начальное положение по Х
position_y = 10      # Начальное положение по Y

print('Марсоход в координатах (8, 10) \n\nИспользуйте следующие клавиши для перемещения:\n ')
print ('"W" - Север \n"S" - Юг \n"A" - Запад \n"D" - Восток')



while key_press != 'stop':
  print ()
  key_press = input('Выберите направление: ')
  if key_press.upper() == 'W' and position_y < 20:     # если нажали вверх, то прибавляем коородинату, если не достигли верхнего порога
    position_y += 1
  if key_press.upper() == 'S' and position_y > 0:      # если нажали вниз, то вычитаем коородинату, если не достигли нижнего порога
    position_y -= 1
  if key_press.upper() == 'D' and position_x < 15:     # если нажали вправо, то прибавляем коородинату, если не достигли верхнего порога
    position_x += 1
  if key_press.upper() == 'A' and position_x > 0:      # если нажали вниз, то вычитаем коородинату, если не достигли нижнего порога
    position_x -= 1
  
  print(f'Текущие коородинаты {position_x, position_y}')
  
print('/n текущие коородинаты')  

#----------------------
print('Задача 6. Спецшифр')

# Два сотрудника спецслужб переписываются необычным шифром.
# Каждую букву они шифруют в виде строки,
# внутри которой есть длинная последовательность букв “s”, 
# а длина самой длинной - это и есть номер буквы алфавита, которую хотят отправить.
# 
# Напишите программу,
# которая получает на вход строку,
# подсчитывает в ней самую длинную последовательность подряд идущих букв “s” и выводит ответ на экран.
# 
# Пример:
# Введите строку: ssbbbsssbc
# Самая длинная последовательность: 3
print ()

s_max = 0    # Максимальная последовательность s
string_code = input('Введите строку с текстом: \n')
s_count = 0

for symb in string_code:
  if symb == 's':    # Считаем до первого не s
    s_count += 1
    #print(symb, s_count) 
  else:
    #print(symb)
    if s_count > s_max:
      #print(s_max, 'до')
      s_max = s_count
      #print(s_max, 'после')
    s_count = 0
    
print()    
if not s_max:        # если строка состоит только из одних символов sss мы получили их в нужном месте
  s_max = s_count

if s_count > s_max:
      s_max = s_count    # если у нас строка закончилась на s нужно проверить не длиннее ли  последняя последовательность максимума

if s_max:
  print(f'Самая длинная последовательность: {s_max}')
else:
  print ('Буквы "s" не в данной строке')

print()

#----------------------
print('Задача 7. Великий и могучий')
print()

# Паоло изучает русский язык: занимается по учебникам, читает книги, слушает музыку.
# Особенно Паоло понравилась книга “Преступление и наказание”.
# И ему стало интересно,
# какое можно найти самое длинное слово в этой книге, чтобы потом сравнить его с аналогом на своём языке.
# 
# Напишите программу,
# которая получает на вход текст и находит длину самого длинного слова в нём.
# Слова в тексте разделяются одним пробелом.
# 
# Пример:
# Введите текст: Меня зовут Петр
# Длина самого длинного слова: 5

w_max = 0    # Максимальная слово
string_text = input('Введите строку с текстом: \n')
w_count = 0

for letter in string_text:
  if letter != ' ':
   w_count += 1
  else:
    w_count = 0      # Как только деньги дошли
  if w_count > w_max:  # Как только длинна слова превышает максимальное уже найденное число, меняем максимальную длинную
    w_max = w_count
    

print(f'Длина самого длинного слова равна {w_max}')

print ()
    
#----------------------
print('Задача 8. Колонтитул')

# Нам нужно написать программу для печати важных объявлений.
# Сверху объявления должен располагаться вот такой колонтитул:
#  ~~~~~~~~~~!!!!!!~~~~~~~~~~
# Восклицательные знаки всегда располагаются по центру строки,
# причём в зависимости от важности объявления количество восклицательных знаков может быть разным.
#
# Напишите программу,
# которая спрашивает у пользователя сначала общую длину колонтитула в символах,
# потом желаемое количество восклицательных знаков,
# после чего выводит на экран готовую строку.
print()

long_num = int(input('Какова длинна колонтитула: '))
symbol_shout = int(input('Введите количество знаков восклицания: '))
print()

half_print = '~' * (long_num // 2 - 1)

print(half_print, end = '~')          # Так как сейчас на 1 меньше, вместо переноса ставим тильду
print('!' * (symbol_shout - 1), end = '!')

if long_num % 2 == 0:
  print(half_print + '~')
else:
  print(half_print + '~~')

print()
#----------------------
print('Задача 9. Коровы')

# Для коров есть 10 стойл.
# В каждом стойле разные условия для животных, поэтому и молока они дают по-разному.
# В первом стойле производят 2 литра в день,
# во втором 4, 
# в третьем - 6, потом 8, 10, 12, 14, 16, 18, 20. 
# Но коровы стоят не во всех стойлах. 
# Свободные и занятые обозначаются строкой из букв a и b,
# где a - свободное стойло, b - занятое.
# 
# Пользователь вводит строку из 10 символов a и b.
# Необходимо определить, сколько в итоге будет произведено молока за день.

string_cow = input('Введите строку из 10 символов. Где a - свободное стойло, b - занятое стойло:\n')
milk_sum = 0

for num in range (len(string_cow)):
  if string_cow[num] == 'b':
    milk_sum += (num + 1) * 2      # сложно судить, как будет лучше с точки зрения скорости работы программы, но я выбрал такой вариант

print(f'Итого литров молока - {milk_sum}',)
#----------------------
print('Задача 10. Метод бутерброда')

# Секретное агентство «Super-Secret-no» решило
# для шифрования переписки своих сотрудников использовать «метод бутерброда».
# Сначала буквы слова нумеруются в таком порядке:
# первая буква получает номер 1,
# последняя буква - номер 2,
# вторая – номер 3,
# предпоследняя – номер 4, потом третья … и так для всех букв (см. рисунок).
# Затем все буквы записываются в шифр в порядке своих номеров.
# 
# Например, слово «sandwich» зашифруется в «shacnidw».
# 
# К сожалению, программист «Super-Secret-no», написал только программу шифрования и уволился.
# И теперь агенты не могут понять, что же они написали друг другу. Помогите им.
# 
# Пример:
# Введите зашифрованное сообщение: shacnidw
# Расшифрованное сообщение: sandwich
#          1   3   5   7   8   6   4   2
# Слово: | s | a | n | d | w | i | c | h |
#
# Шифр:  | s | h | a | c | n | i | d | w |
print()

word_code = input('Введите закодированное сообщение: ')

word_decode = ''
word_length = len(word_code)
Flag_odd = True      # по умолчанию считаем, что длинна нечетная

if word_length % 2 != 0:
  Flag_odd = False      # теперь мы знаем, четное или нет у нас слово, можем формировать первую и второую полвину слова

for num in range (0, word_length, 2):
  word_decode += word_code[num]
 

if not Flag_odd: 
  word_length -= 1     # Если число четное, что нужно начинаться не с последнего символа, а с предпоследнего.

for num in range (word_length-1, 0, -2):
  
  word_decode += word_code[num]
print()
print ('Расшифрованное сообщение -', word_decode)



